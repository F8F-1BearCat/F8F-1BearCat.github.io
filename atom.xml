<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Magical Cat</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-16T09:04:31.238Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>F8F-1BearCat</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>线上应用故障排查：高内存占用</title>
    <link href="http://yoursite.com/2018/11/16/%E7%BA%BF%E4%B8%8A%E5%BA%94%E7%94%A8%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%EF%BC%9A%E9%AB%98%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8/"/>
    <id>http://yoursite.com/2018/11/16/线上应用故障排查：高内存占用/</id>
    <published>2018-11-16T09:04:30.994Z</published>
    <updated>2018-11-16T09:04:31.238Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn2.iconfinder.com/data/icons/oxygen/128x128/mimetypes/text-x-java.png" alt="图片"></p><p>挖坑…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://cdn2.iconfinder.com/data/icons/oxygen/128x128/mimetypes/text-x-java.png&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;
&lt;p&gt;挖坑…&lt;/p&gt;

      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Netty" scheme="http://yoursite.com/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>线上应用故障排查：高CPU占用</title>
    <link href="http://yoursite.com/2018/11/16/%E7%BA%BF%E4%B8%8A%E5%BA%94%E7%94%A8%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%EF%BC%9A%E9%AB%98CPU%E5%8D%A0%E7%94%A8/"/>
    <id>http://yoursite.com/2018/11/16/线上应用故障排查：高CPU占用/</id>
    <published>2018-11-16T03:28:20.479Z</published>
    <updated>2018-11-16T08:35:10.220Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn2.iconfinder.com/data/icons/oxygen/128x128/mimetypes/text-x-java.png" alt="图片"></p><p>挖坑…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://cdn2.iconfinder.com/data/icons/oxygen/128x128/mimetypes/text-x-java.png&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;
&lt;p&gt;挖坑…&lt;/p&gt;

      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Netty" scheme="http://yoursite.com/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>Netty直接内存泄露</title>
    <link href="http://yoursite.com/2018/11/16/Netty%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    <id>http://yoursite.com/2018/11/16/Netty直接内存泄露/</id>
    <published>2018-11-16T02:50:20.893Z</published>
    <updated>2018-11-16T08:33:47.663Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn2.iconfinder.com/data/icons/oxygen/128x128/mimetypes/text-x-java.png" alt="图片"></p><p>挖坑…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://cdn2.iconfinder.com/data/icons/oxygen/128x128/mimetypes/text-x-java.png&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;
&lt;p&gt;挖坑…&lt;/p&gt;

      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Netty" scheme="http://yoursite.com/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>Effective Java(10)</title>
    <link href="http://yoursite.com/2018/11/15/Effective%20Java(10)/"/>
    <id>http://yoursite.com/2018/11/15/Effective Java(10)/</id>
    <published>2018-11-15T09:32:56.881Z</published>
    <updated>2018-11-16T03:30:56.093Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn2.iconfinder.com/data/icons/oxygen/128x128/mimetypes/text-x-java.png" alt="图片"></p><h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h1><h2 id="66-同步访问共享的可变数据"><a href="#66-同步访问共享的可变数据" class="headerlink" title="66 同步访问共享的可变数据"></a>66 同步访问共享的可变数据</h2><ul><li>程序不会终止，后台线程永远在循环。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopThread</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> stopRequested;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">Thread </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>未完待续</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://cdn2.iconfinder.com/data/icons/oxygen/128x128/mimetypes/text-x-java.png&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;并发&quot;&gt;&lt;a href=&quot;#并发&quot; class=
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Effective Java" scheme="http://yoursite.com/tags/Effective-Java/"/>
    
  </entry>
  
  <entry>
    <title>Effective Java(8)</title>
    <link href="http://yoursite.com/2018/11/15/Effective%20Java(8)/"/>
    <id>http://yoursite.com/2018/11/15/Effective Java(8)/</id>
    <published>2018-11-15T09:20:20.664Z</published>
    <updated>2018-11-16T02:41:17.834Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn2.iconfinder.com/data/icons/oxygen/128x128/mimetypes/text-x-java.png" alt="图片"></p><h1 id="通用程序设计"><a href="#通用程序设计" class="headerlink" title="通用程序设计"></a>通用程序设计</h1><h2 id="45-将局部变量作用域最小化"><a href="#45-将局部变量作用域最小化" class="headerlink" title="45 将局部变量作用域最小化"></a>45 将局部变量作用域最小化</h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>增强代码的<strong>可读性</strong>和<strong>维护性</strong>，并降低 <strong>出错</strong>的可能性。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li>在局部变量第一次使用的地方声明。</li><li>几乎每个局部变量的声明都应该包含一个初始化表达式。</li><li>使方法小而集中</li></ul><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><ul><li><strong>try-catch</strong></li><li><strong>for</strong>循环与<strong>while</strong>循环对比</li></ul><h2 id="46-for-each循环优先于传统的for循环"><a href="#46-for-each循环优先于传统的for循环" class="headerlink" title="46 for-each循环优先于传统的for循环"></a>46 for-each循环优先于传统的for循环</h2><h3 id="for循环缺点"><a href="#for循环缺点" class="headerlink" title="for循环缺点"></a>for循环缺点</h3><ul><li><strong>迭代器</strong>和<strong>索引变量</strong>在每个循环中出现三次，其中有两次很容易出错，且编译器不能发现错误。<h3 id="for-each循环的优点"><a href="#for-each循环的优点" class="headerlink" title="for-each循环的优点"></a>for-each循环的优点</h3></li><li>通过完全隐藏迭代器或者索引变量，避免了混乱或者出错的很可能。</li><li>利用<code>for-each</code>循环不会有性能损失，在某些情况下，还稍有性能优势。因其对数组索引的边界值只计算一次。</li><li><p>在对多个集合进行嵌套式迭代时，<code>for-each</code>循环能避免<code>for</code>循环可能出现的问题，同时兼顾代码简洁。  </p><blockquote><p>传统for循环嵌套迭代</p></blockquote><pre><code>enum Face {ONE, TWO, THREE, FOUR, FIVE, SIX}  ...Collection&lt;Face&gt; faces = Array.asList(Face.values());for (Iterator&lt;Face&gt; i = faces.iterator(); i.hasNext; )    for (Iterator&lt;Face&gt; j = faces.iterator(); j.hasNext; )        Sysytem.out.println(i.next() + &quot; &quot; + j.next());</code></pre><blockquote><p>for-each嵌套迭代</p></blockquote><pre><code>for (Suit suit : suits)    for (Rank rank : ranks)        deck.add (new Card (suit, rank));</code></pre></li><li><code>for-each</code>循环不仅能遍历集合和数组，还能遍历任何实现<code>Iterable</code>接口的对象。<h3 id="有三种常见的情况无法使用for-each循环"><a href="#有三种常见的情况无法使用for-each循环" class="headerlink" title="有三种常见的情况无法使用for-each循环"></a>有三种常见的情况无法使用for-each循环</h3></li></ul><ol><li>过滤——需要遍历集合，并删除选定的元素。</li><li>转换——需要遍历列表或数组，并取代它部分或全部的元素值。</li><li>平行迭代——需要并行的遍历多个集合。</li></ol><h2 id="47-了解和使用类库"><a href="#47-了解和使用类库" class="headerlink" title="47 了解和使用类库"></a>47 了解和使用类库</h2><h3 id="类库中值得注意的两个工具"><a href="#类库中值得注意的两个工具" class="headerlink" title="类库中值得注意的两个工具"></a>类库中值得注意的两个工具</h3><ul><li><strong>java.util</strong>包中Collections Framework（集合框架）</li><li><strong>java.util.concurrent</strong>包</li></ul><h2 id="48-如果需要精确的答案，请避免使用float和double"><a href="#48-如果需要精确的答案，请避免使用float和double" class="headerlink" title="48 如果需要精确的答案，请避免使用float和double"></a>48 如果需要精确的答案，请避免使用float和double</h2><ul><li><strong>float</strong> 和 <strong>double</strong> 执行<em>二进制浮点运算</em>，没有提供完全精确的结果，尤其不适合用于货币计算。</li><li><p>使用<strong>BigDecimal</strong>、<strong>int</strong> 或者 <strong>long</strong>进行货币计算。</p><blockquote><ul><li>使用<strong>BigDecimal</strong>缺点：与基本运算类型相比，不方便，而且很慢；优点： 系统记录十进制小数点，允许完全控制舍入，数值超过18位数字。</li><li>选用<strong>int</strong>或者 <strong>long</strong>取决于所涉及数值的大小，同时自己处理十进制小数点。数值没有超过9位数字用 <strong>int</strong>，数值没有超过18位数字用<strong>float</strong>。</li></ul></blockquote></li></ul><h2 id="49-基本类型优于装箱基本类型"><a href="#49-基本类型优于装箱基本类型" class="headerlink" title="49 基本类型优于装箱基本类型"></a>49 基本类型优于装箱基本类型</h2><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><blockquote><p>举例：int，double，boolean</p></blockquote><h3 id="装箱基本类型"><a href="#装箱基本类型" class="headerlink" title="装箱基本类型"></a>装箱基本类型</h3><blockquote><p>举例：Integer，Double，Boolean</p></blockquote><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>基本类型只有值，而装箱基本类型则具有与它们的值不同的同一性（对象引用）；</li><li>基本类型只有功能完备的值，而每个装箱基本类型还有个非功能值：<strong>null</strong>；</li><li>基本类型通常比装箱基本类型更节省时间和空间。</li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li><p>对装箱基本类型使用 <strong>==</strong> 操作符几乎总是错误的； </p><blockquote><p>比较器错误地返回1；  </p></blockquote><pre><code>public int compare(Integer first, Interger second) {    return first &lt; second ? -1 : (first == sencond ? 0 : 1);}</code></pre></li><li><p>当一项操作中混合使用基本类型与装箱基本类型时，装箱基本类型会自动拆箱。如果<strong>null</strong>对象引用被拆箱，则抛出NullPointerException异常。</p><blockquote><p>抛出NullPointerException异常</p></blockquote><pre><code>static Integer i;public static void main(String[] args) {    if (i == 42)        System.out.println(&quot;123&quot;);}</code></pre></li><li><p>循环中装箱基本类型的变量被反复装箱和拆箱，产生严重性能问题。</p><pre><code>Long sum = 0L;for (long i = 0; i &lt; Integer.MAX_VALUE; i++) {    sum += i;}</code></pre></li></ul><h2 id="50-如果其他类型更适合，则尽量避免使用字符串"><a href="#50-如果其他类型更适合，则尽量避免使用字符串" class="headerlink" title="50 如果其他类型更适合，则尽量避免使用字符串"></a>50 如果其他类型更适合，则尽量避免使用字符串</h2><h3 id="不应该使用字符串的情形"><a href="#不应该使用字符串的情形" class="headerlink" title="不应该使用字符串的情形"></a>不应该使用字符串的情形</h3><ul><li>字符串不适合代替其他的值类型</li><li>字符串不适合代替枚举类型</li><li>字符串不适合代替聚集类型</li><li>字符串不适合代替能力表（capabilities）</li></ul><h2 id="51-当心字符串连接的性能"><a href="#51-当心字符串连接的性能" class="headerlink" title="51 当心字符串连接的性能"></a>51 当心字符串连接的性能</h2><p>由于字符串不可变，在连接字符串时，它们的内容都要被拷贝。如果数量巨大，应使用<strong>StringBuilder</strong>的 <strong>append</strong>方法。</p><h2 id="52-通过接口引用对象"><a href="#52-通过接口引用对象" class="headerlink" title="52 通过接口引用对象"></a>52 通过接口引用对象</h2><ul><li><p>优先使用接口而不是类来引用对象。如果有合适的接口类型存在，参数、返回值、变量和域都应该用接口类型进声明。 </p><blockquote><p>里氏替换原则</p></blockquote><pre><code>//通过接口引用对象 List&lt;String&gt; lists = new ArrayList&lt;String&gt;(); //通过类引用对象 ×ArrayList&lt;String&gt; lists = new ArrayList&lt;String&gt;();</code></pre></li><li>如果没有合适的接口存在，用类来引用对象。<ul><li>情形一  <strong>值类</strong>，例如<code>String</code>和<code>BigInteger</code>。值类通常是final的，很少会用多个实现，并且很少有对应的接口。</li><li>情形二  对象属于框架，框架的基本类型为类不是接口，例如<code>java.util.TimerTask</code>。使用相关的<strong>基类</strong>引用对象，不用实现类。</li><li>情形三  类实现了接口，但提供了接口中不存在的额外方法，例如<code>LinkedHashMap</code>。</li></ul></li></ul><h2 id="53-接口优于反射机制"><a href="#53-接口优于反射机制" class="headerlink" title="53 接口优于反射机制"></a>53 接口优于反射机制</h2><h3 id="反射机制的弊端"><a href="#反射机制的弊端" class="headerlink" title="反射机制的弊端"></a>反射机制的弊端</h3><ul><li>丧失了编译时类型检查的好处。</li><li>执行反射访问的代码冗长。</li><li>性能损失。</li></ul><h2 id="54-55-56-待续"><a href="#54-55-56-待续" class="headerlink" title="54 55 56 待续"></a>54 55 56 待续</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://cdn2.iconfinder.com/data/icons/oxygen/128x128/mimetypes/text-x-java.png&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;通用程序设计&quot;&gt;&lt;a href=&quot;#通用程序设计
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Effective Java" scheme="http://yoursite.com/tags/Effective-Java/"/>
    
  </entry>
  
</feed>
